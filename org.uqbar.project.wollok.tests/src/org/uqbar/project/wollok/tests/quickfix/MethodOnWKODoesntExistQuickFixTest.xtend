package org.uqbar.project.wollok.tests.quickfix

import org.junit.jupiter.api.Test
import org.uqbar.project.wollok.ui.Messages

class MethodOnWKODoesntExistQuickFixTest extends AbstractWollokQuickFixTestCase {

	@Test
	def void createNonExistingMethodOnSameFileWithoutDefinition() {
		val initial = #['''
			object anObject{}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod()
				}
			}
		''']

		val result = #['''
			object anObject{
				method otherMethod() {
					//TODO: Autogenerated Code ! 
				}
			}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod()
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void createNonExistingMethodOnSameFileWithoutDefinitionWithOneSpace() {
		val initial = #['''
			object anObject{}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod( )
				}
			}
		''']

		val result = #['''
			object anObject{
				method otherMethod() {
					//TODO: Autogenerated Code ! 
				}
			}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod( )
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void createNonExistingMethodOnSameFileWithoutDefinitionJustOneSpace() {
		val initial = #['''
			object anObject{ }
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod()
				}
			}
		''']

		val result = #['''
			object anObject{ 
				method otherMethod() {
					//TODO: Autogenerated Code ! 
				}
			}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod()
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void createNonExistingMethodOnSameFileWithOtherMethods() {
		val initial = #['''
			object anObject{
				method one() {
				}
				
				method two() {
				}
			}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod()
				}
			}
		''']

		val result = #['''
			object anObject{
				method one() {
				}
				
				method two() {
				}
				method otherMethod() {
					//TODO: Autogenerated Code ! 
				}
			}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod()
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void createNonExistingMethodOnSameFileWithFullDefinitions() {
		val initial = #['''
			object anObject{
				var a = 1
				
				
				
				method one() {
					a = a + 1
				}
				
				method two() {
				}


			}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod()
				}
			}
		''']

		val result = #['''
			object anObject{
				var a = 1
				
				
				
				method one() {
					a = a + 1
				}
				
				method two() {
				}
				method otherMethod() {
					//TODO: Autogenerated Code ! 
				}


			}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod()
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void createNonExistingMethodOnDifferentFile() {
		val initial = #['''
			object anObject{}
		''',
		'''
			import file0.anObject

			object anotherObject{
				method aMethod(){
					anObject.otherMethod()
				}
			}
		''']

		val result = #['''
			object anObject{
				method otherMethod() {
					//TODO: Autogenerated Code ! 
				}
			}
		''',
		'''
			import file0.anObject
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod()
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void createNonExistingMethodOnSameFileWithOneParameter() {
		val initial = #['''
			object anObject{}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod(55)
				}
			}
		''']

		val result = #['''
			object anObject{
				method otherMethod(param1) {
					//TODO: Autogenerated Code ! 
				}
			}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod(55)
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void createNonExistingMethodOnSameFileWithSeveralParameters() {
		val initial = #['''
			object anObject{}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod(55, "hello, wollok", [2, 34, 7])
				}
			}
		''']

		val result = #['''
			object anObject{
				method otherMethod(param1, param2, param3) {
					//TODO: Autogenerated Code ! 
				}
			}
			
			object anotherObject{
				method aMethod(){
					anObject.otherMethod(55, "hello, wollok", [2, 34, 7])
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

}
	