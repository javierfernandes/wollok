package org.uqbar.project.wollok.tests.quickfix

import org.junit.Test
import org.uqbar.project.wollok.ui.Messages

class MethodOnSelfDoesntExistsQuickFixTest extends AbstractWollokQuickFixTestCase {

	@Test
	def void missingMethodInObject() {
		val initial = #['''
			object anObject{
				method aMethod(){
					self.otherMethod()
				}
			}
		''']

		val result = #['''
			object anObject{
				method aMethod(){
					self.otherMethod()
				}
				method otherMethod() {
					//TODO: Autogenerated Code ! 
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void missingMethodInClass() {
		val initial = #['''
			class MyClass{
				method aMethod(){
					self.otherMethod()
				}
			}
		''']

		val result = #['''
			class MyClass{
				method aMethod(){
					self.otherMethod()
				}
				method otherMethod() {
					//TODO: Autogenerated Code ! 
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void missingMethodInMixin() {
		val initial = #['''
			mixin MyClass{
				method aMethod(){
					self.otherMethod()
				}
			}
		''']

		val result = #['''
			mixin MyClass{
				method aMethod(){
					self.otherMethod()
				}
				method otherMethod() {
					//TODO: Autogenerated Code ! 
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void missingMethodInObjectLiteral() {
		val initial = #['''
			program xxx {
				object {
					method aMethod(){
						self.otherMethod()
					}
				}
			}
		''']

		val result = #['''
			program xxx {
				object {
					method aMethod(){
						self.otherMethod()
					}
					method otherMethod() {
						//TODO: Autogenerated Code ! 
					}
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

	@Test
	def void missingMethodInClassWithMargin() {
		val initial = #['''
			class MyClass{
				method aMethod(){
					const a = 1
					if (a === 1)
						self.otherMethod()
				}
			}
		''']

		val result = #['''
			class MyClass{
				method aMethod(){
					const a = 1
					if (a === 1)
						self.otherMethod()
				}
				method otherMethod() {
					//TODO: Autogenerated Code ! 
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickfixProvider_createMethod_name)
	}

}
	