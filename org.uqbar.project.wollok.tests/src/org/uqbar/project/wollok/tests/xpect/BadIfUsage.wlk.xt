/* XPECT_SETUP org.uqbar.project.wollok.tests.xpect.WollokXPectTest END_SETUP */

object joaquin {
	const tocaEnGrupo = false
	var gradoAlegria 
	
	// XPECT errors --> "If-statements without else cannot be considered valid expressions as they cannot always yield a value" at "tocaEnGrupo"
	method habilidadAdquirida() = if (tocaEnGrupo) 5

 	// XPECT errors --> "Must return a value on every possible flow" at "felicidad"
	method felicidad() {
		if (tocaEnGrupo) return 5
	}
	
	method inicializar() {
		// XPECT errors --> "If-statements without else cannot be considered valid expressions as they cannot always yield a value" at "tocaEnGrupo"
		gradoAlegria = if (tocaEnGrupo) 3
	}
	
	// XPECT errors --> "If-statements without else cannot be considered valid expressions as they cannot always yield a value" at "tocaEnGrupo"
	method felicidadTotal(numero) = numero + if (tocaEnGrupo) 5
	
	method validarFelicidad() {
		// XPECT errors --> "If-statements without else cannot be considered valid expressions as they cannot always yield a value" at "tocaEnGrupo"
		assert.equals(10, if (tocaEnGrupo) 5)
	}
	
	method asignarFelicidadSiCorresponde() {
		if (tocaEnGrupo) {
			gradoAlegria = gradoAlegria + 10
		}
	}
}

object sarasita {
	
	method withTheReturnWithinTheBranches(n) {
		// XPECT warnings --> "Bad usage of if ! You must return the condition itself without using if. Use:  return n % 2 == 0" at "n % 2 == 0"
		if (n % 2 == 0)
			return true
		else
			return false
	}
	
	method withBlockOnThenButSimpleExpressionOnElse(n) {
		// XPECT warnings --> "Bad usage of if ! You must return the condition itself without using if. Use:  return n % 2 == 0" at "n % 2 == 0"
		if (n % 2 == 0) {
			return true
		}
		else
			return false
	}
	
	method withSimpleExpressionNoBlockOnThen(n) {
		// XPECT warnings --> "Bad usage of if ! You must return the condition itself without using if. Use:  return n % 2 == 0" at "n % 2 == 0"
		if (n % 2 == 0)
			return true
		else {
			return false
		}
	}
	
	method withSimpleExpressionNoBlockReturnOutsideOfTheIf(n) {
		// XPECT warnings --> "Bad usage of if ! You must return the condition itself without using if. Use:  return n % 2 == 0" at "n % 2 == 0"
		return if (n % 2 == 0)
			true
		else
			false
	}
	
	method esPar5(n) {
		// XPECT warnings --> "Bad usage of if ! You must return the condition itself without using if. Use:  return n % 2 == 0" at "n % 2 == 0"
		return if (n % 2 == 0) {
			true
		}
		else
			false
	}
	
	method invertedCondition(n) {
		// XPECT warnings --> "Bad usage of if ! You must return the condition itself without using if. Use:  return !(n % 2 == 0)" at "n % 2 == 0"
		return if (n % 2 == 0) {
			false
		}
		else
			true
	}
	
	method invertedConditionWithReturnWithinBranches(n) {
		// XPECT warnings --> "Bad usage of if ! You must return the condition itself without using if. Use:  return !(n % 2 == 0)" at "n % 2 == 0"
		if (n % 2 == 0) {
			return false
		}
		else
			return true
	}
	
	method invertedWithSimpleExpressionNoBlock(n) {
		// XPECT warnings --> "Bad usage of if ! You must return the condition itself without using if. Use:  return !(n % 2 == 0)" at "n % 2 == 0"
		return if (n % 2 == 0) false else true
	}
	
	method ifInsideExpressionWithoutElseShouldFailForBinaryRightOperation() {
		// XPECT errors --> "If-statements without else cannot be considered valid expressions as they cannot always yield a value" at "1 == 2"
		return 1 * if(1 == 2) 2
	}
	
	method ifInsideExpressionWithoutElseShouldFailForReturn() {
		// XPECT errors --> "If-statements without else cannot be considered valid expressions as they cannot always yield a value" at "1 == 2"
		return if(1 == 2) 2
	}
	
	method ifInsideExpressionWithoutElseShouldFailForBinaryLeftOperation() {
		// XPECT errors --> "If-statements without else cannot be considered valid expressions as they cannot always yield a value" at "1 == 2"
		return (if(1 == 2) 2) + 3
	}
	
	method ifInsideExpressionWithoutElseShouldFailInAssignment() {
		// XPECT errors --> "If-statements without else cannot be considered valid expressions as they cannot always yield a value" at "1 == 2"
		var failed = if(1 == 2) 2
		const ok = if (1 == 2) 2 else 3
		failed = ok
		return ok == 3
	}

	method addOneTo(value) {
		return 1 + value
	}

	method invokeAddOneTo() {
		// XPECT errors --> "If-statements without else cannot be considered valid expressions as they cannot always yield a value" at "1 == 2"
		return self.addOneTo(if (1 == 2) 4)
	}
}
