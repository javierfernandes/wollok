/* XPECT_SETUP org.uqbar.project.wollok.tests.xpect.WollokXPectTest END_SETUP */

mixin M1 {
   method m() {
   	  self.doIt()      // expected abstract method
   }
   method doIt()
}

class C mixed with M1 {} // should be considered abstract

class D inherits C {}


mixin M2 {}

class E inherits D mixed with M2 {}

mixin M3 {
	method blah() { self.sarasa() }
	method sarasa()
}

class F inherits E mixed with M3 {}

mixin DoIt {
	method doIt() {}
}

class G inherits E mixed with DoIt {}

class DoItClass {
	method doIt() {}
}

class H inherits DoItClass mixed with M2 {}

class I mixed with M2 {
	method doIt() {}
}

object p {
	method run() {
		// XPECT errors --> "Class C cannot be instantiated because it has abstract methods: doIt() (required by M1)" at "C"
		const c = new C()
		console.println(c)
		
		// XPECT errors --> "Class D cannot be instantiated because it has abstract methods: doIt() (required by M1)" at "D"
		const d = new D()
		console.println(d)
		
		// XPECT errors --> "Class E cannot be instantiated because it has abstract methods: doIt() (required by M1)" at "E"
		const e = new E()
		console.println(e)
		
		// XPECT errors --> "Class F cannot be instantiated because it has abstract methods: doIt() (required by M1), sarasa() (required by M3)" at "F"
		const f = new F()
		console.println(f)
		
		console.println(new G())
		
		console.println(new H())
		
		console.println(new I())
	}
}

// checks mixin must explicitly tell required methods

mixin M3 {
	method blah() {
		// XPECT errors --> "Method does not exist or invalid number of arguments" at "sarasa"
		self.sarasa()
	}
}

// XPECT errors --> "You must implement all inherited abstract methods: M1.doIt()" at "a"
object a mixed with M1 {
}

// XPECT errors --> "You must implement all inherited abstract methods: M1.doIt()" at "b"
object b mixed with M1, M2 {
}

// positive case: object does implement the abstract methods from the mixins
object c mixed with M1, M2 {
	override method doIt() { 
		// blah
	}
}

//
// Mixin Calling super() mixed in differnt combination
//  checks for super implementation present
//


mixin Doctor {
	
	method name() = "Dr. " + super()
	
}

// XPECT errors --> "Inconsistent hierarchy. Methods on mixins without super implementation on hierarchy: Doctor.name()" at "Tomato"
class Tomato mixed with Doctor {}

// XPECT errors --> "Inconsistent hierarchy. Methods on mixins without super implementation on hierarchy: Doctor.name()" at "TomatoWithNameBelowSuper"
class TomatoWithNameBelowSuper mixed with Doctor {
	override method name() = "23"
}

mixin Named {
	method name() = "a name"
}

// OK !
class Person mixed with Named and Doctor {}

// NOT OK ! order matters !
// XPECT errors --> "Inconsistent hierarchy. Methods on mixins without super implementation on hierarchy: Doctor.name()" at "PersonBad"
class PersonBad mixed with Doctor and Named {}

// OK: super method comes from super class

class WithName {
	method name() = "name on a class"
}
class ANamed inherits WithName mixed with Doctor {
}

// XPECT errors --> "Inconsistent hierarchy. Methods on mixins without super implementation on hierarchy: Doctor.name()" at "o1"
object o1 mixed with Doctor {
}

// OK
object o2 inherits WithName mixed with Doctor {
}

// OK
object o3 mixed with Named and Doctor {}

// XPECT errors --> "Inconsistent hierarchy. Methods on mixins without super implementation on hierarchy: Doctor.name()" at "o4"
object o4 mixed with Doctor and Named {}


//
// Instantiation Time Mixins
//

class Pepin {}

object mixingAtInstantiation {
	method doIt() {
		
		return [
			// OK
			new WithName() with Doctor,
			// XPECT errors --> "Inconsistent hierarchy. Methods on mixins without super implementation on hierarchy: Doctor.name()" at "Object"
			new Object() with Doctor,
			
			// OK 
			new Pepin() with Named with Doctor,
			// XPECT errors --> "Inconsistent hierarchy. Methods on mixins without super implementation on hierarchy: Doctor.name()" at "Pepin"
			new Pepin() with Doctor with Named
		]
	}
}
