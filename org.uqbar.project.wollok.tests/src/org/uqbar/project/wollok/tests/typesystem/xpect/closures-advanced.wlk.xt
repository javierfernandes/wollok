/* XPECT_SETUP org.uqbar.project.wollok.tests.typesystem.xpect.TypeSystemXpectTestCase END_SETUP */

object advancedClosures {
	// XPECT methodType at next --> (Number) => Number
	method next(n) {
		return { a => a + 1 }.apply(n)
	}
}

object incompatibility {
	//const numbers = [1,2,3]
	
	method closure_vs_basic_type() {
		// XPECT warnings --> "Type system: expected <<{(Number) => Boolean}>> but found <<String>>" at ""ERROR""
		return [1,2,3].filter("ERROR")
	} 
	
	method basic_vs_closure_type() {
		// XPECT warnings --> "Type system: expected <<Number>> but found <<{() => String}>>" at "{"ERROR"}"
		return [1,2,3].contains({"ERROR"})
	} 
	
	method closure_type_with_different_params() {
		// XPECT warnings --> "Type system: expected <<{(Number) => Boolean}>> but found <<{() => Boolean}>>" at "{true}"
		return [1,2,3].filter({true})
	}
	 
	method incompatible_param_closure_type() {
		// XPECT warnings --> "Number does not understand startsWith("ERROR")" at "n.startsWith("ERROR")"
		return [1,2,3].filter({n => n.startsWith("ERROR")})
	}

	method incompatible_return_closure_type() {
		/* XPECT warnings ---
			"Type system: expected <<Boolean>> but found <<String>>" at ""ERROR""
			"Type system: expected <<Boolean>> but found <<String>>" at "{n => "ERROR"}"
		--- */		
		return [1,2,3].any({n => "ERROR"})
	}
	
	method infinite_closure_type(c) {
		// XPECT warnings --> "Type system: Infinite recursive type" at "c"
		return [c].filter(c)
	}	
}