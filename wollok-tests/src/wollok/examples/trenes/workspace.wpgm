import trenes.*

// 1)
program trenes {

  const tren = new Tren()
  tren.agregarVagon(new VagonPasajeros(ancho = 2, largo = 10))
  assert.equals(80, tren.getCantidadPasajeros())

  tren.agregarVagon(new VagonPasajeros(ancho = 3, largo = 10))
  assert.equals(180, tren.getCantidadPasajeros())

  tren.agregarVagon(new VagonCarga(cargaMaxima = 1000))
  assert.equals(180, tren.getCantidadPasajeros())

  // 2) Cuántos vagones livianos tiene una formación;
  assert.equals(1, tren.getCantidadVagonesLivianos()) // el de carga


  // 3) La velocidad máxima de una formación,
  tren.agregarLocomotora(new Locomotora(peso = 1020, pesoMaximoArrastre = 8100, velocidadMaxima = 60)) // de 60 kpm
  tren.agregarLocomotora(new Locomotora(peso = 1400, pesoMaximoArrastre = 10000,velocidadMaxima =  75)) // de 60 kpm

  assert.equals(60, tren.getVelocidadMaxima())

  // 4) Si una formación es eficiente;
  assert.that(new Locomotora(peso = 10, pesoMaximoArrastre = 50, velocidadMaxima = 0).esEficiente())
  assert.that(new Locomotora(peso = 10, pesoMaximoArrastre = 51, velocidadMaxima = 0).esEficiente())
  assert.notThat(new Locomotora(peso = 10, pesoMaximoArrastre = 49, velocidadMaxima = 0).esEficiente())

  assert.that(tren.esEficiente())

  // 5) Si una formación puede moverse.
  assert.that(tren.puedeMoverse())

  // 6) Cuántos kilos de empuje le faltan a una formación para poder moverse,
  assert.equals(0, tren.getKilosEmpujeFaltantes())

  const trenNoSeMueve = new Tren()
  trenNoSeMueve.agregarVagon(new VagonPasajeros(ancho = 3, largo = 12))
  trenNoSeMueve.agregarLocomotora(new Locomotora(peso = 1200, pesoMaximoArrastre = 4000, velocidadMaxima = 55))
  assert.notThat(trenNoSeMueve.puedeMoverse())
  assert.equals(6800, trenNoSeMueve.getKilosEmpujeFaltantes())

  // 7) Dado un depósito, obtener el conjunto formado por el vagón más pesado de cada formación;

  const deposito = new Deposito()
  deposito.agregarFormacion(tren)
  deposito.agregarFormacion(trenNoSeMueve)

  assert.equals(2, deposito.vagonesMasPesados().size())
}