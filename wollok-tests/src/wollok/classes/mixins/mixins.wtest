mixin Energy {
	var energy = 100
}

class Birdo mixed with Energy {
	method fly(meters) {
		energy -= meters
	}
	method energy() = energy
}


mixin Flies {
	method fly() {
	}
}

class Bird mixed with Flies {}

mixin Walks {
	var walkedDistance = 0
	method walk(distance) {
		walkedDistance += distance
	}
	method walkedDistance() = walkedDistance
}

class WalkingBird mixed with Walks {}

mixin Energyo {
	var energy = 100
	method reduceEnergy(amount) { energy -= amount }
	method energy() = energy
}

class Birdo mixed with Energyo {
	override method reduceEnergy(amount) { 
		super(1)
	}
}

mixin ReducableEnergy {
	var energy = 100
	method energy() = energy
	method reduceEnergy(amount) {
		energy -= amount
	}
}
		
mixin Flying {
	var fliedMeters = 0
	method fly(meters) {
		self.reduceEnergy(meters)
		fliedMeters += meters
	}
	method fliedMeters() = fliedMeters
	method reduceEnergy(meters)
}

class BirdWithEnergyThatFlies mixed with ReducableEnergy, Flying {}


mixin FlyingShortcuts {
	method fly100Meters() {
		self.fly(100)
	}
	method fly(amount)
}

class BirdWithFlyingShortCuts mixed with FlyingShortcuts {
	var energy = 200
	override method fly(meters) { energy -= meters }
	method energy() = energy
}

		object example {
			method aList() = [1,2,3]
			method useTheList() {
				const pepe = self.aList()
				console.println(pepe)
			}
		}

object pepita mixed with Flies {}

// **************************
// ** tests
// **************************

test "Class with simple mixin inherits a method" {
	const b = new Bird()
	b.fly()
}

test "Class with mixin modifying its own state from the mixin" {
	const b = new WalkingBird()
	b.walk(10)
	const walked = b.walkedDistance()
	assert.equals(10, walked)
}

test "asd" {
	const b = new BirdWithEnergyThatFlies()
	b.fly(10)
	assert.equals(90, b.energy())
	assert.equals(10, b.fliedMeters())
}


test "Mixin method calls a method on the class" {
	const b = new BirdWithFlyingShortCuts()
	b.fly100Meters()
	assert.equals(100, b.energy())
}

test "WKO with mixin" {
	pepita.fly()
}
