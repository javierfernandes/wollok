grammar org.uqbar.project.wollok.WollokDsl with org.eclipse.xtext.common.Terminals

generate wollokDsl "http://uqbar-project.org/wollok/WollokDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

WFile:
    (imports+=Import)*
	elements+=WLibraryElement* 
	(main=WProgram | tests+=WTest+)?
;

// IMPORTS

Import: 'import' importedNamespace=QualifiedNameWithWildcard;
QualifiedName: ID ('.' ID)*;
QualifiedNameWithWildcard: QualifiedName ('.' '*')?;

// CONTENT


WProgram:
	'program' name=ID '{'
		(elements+=WExpressionOrVarDeclaration ';'?)+
	'}'
;

WTest:
	'test' name=STRING '{'
		(elements+=WExpressionOrVarDeclaration ';'?)+		
	'}'
;

WPackage:
	'package' name=QualifiedName '{'
		elements+=(WClass | WNamedObject)*
	'}'
;

// reglas generales (solo para ordenar y para fijar bien las relaciones entre clases
// porque a veces xtext no genera bien.
// eventualmente sería bueno construir estas clases a mano con EMF, y poder
// agregarles métodos: ej: WNamed.getName() y que las reglas las hereden. Para no necesitar extension methods
WLibraryElement: (WPackage | WClass | WNamedObject );
WNamed: WMethodDeclaration | WReferenciable | WPackage | WClass;
WMethodContainer: WClass | {WObjectLiteral} | WNamedObject;
WReferenciable: WParameter | {WVariable} | WNamedObject ;

WObjectLiteral returns WExpression:
	{WObjectLiteral}
	=>'object' '{'
		(members+=WVariableDeclaration ';'?)*
		(members+=WMethodDeclaration ';'?)*
	'}'
;

WVariableDeclaration returns WExpression:
	{WVariableDeclaration}
	(writeable?='var'|'val') variable=WVariable ('=' right=WExpression)?
;

WMethodDeclaration:
	(overrides?='override')? 'method'
		name=WMethodName '(' (parameters+=WParameter (',' parameters+=WParameter)* )?')' 
		(native?='native')? 
		
		((expression=WBlock) | (expressionReturns?='=' expression=WOrExpression))?
;

WMethodName:
	// TODO: 2 esto deberia tener un @check el método con +, o - necesita tener un solo argumento
	ID | OpAdd | OpMulti | OpEquality | OpOther | OpCompare | OpAnd | OpOr
;

WParameter:
	name=ID (varArg?='...')?
;

WVariable:
	name=ID 
;

	
// **************************
// ** lexer rules
// **************************

Number hidden():
	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	
terminal HEX:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ 
	('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	
terminal INT returns ecore::EInt:
	'0'..'9' ('0'..'9'|'_')*; 

terminal DECIMAL:
	INT 
	(('e'|'E') ('+'|'-')? INT)? 
	(('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;

	
// ***********************
// ** as XBase
// ***********************

WExpression returns WExpression:
	WAssignment;
	
WAssignment returns WExpression :
	{WAssignment} feature=WVariableReference OpSingleAssign value=WAssignment
	| WOrExpression (
		=>({WBinaryOperation.leftOperand=current} feature=OpMultiAssign) rightOperand=WAssignment
	)?
;
	
OpSingleAssign:
	'='
;

OpMultiAssign:
	'+=' | '-=' | '*=' | '/=' | '%=' | 
	'<' '<' '=' | 
	'>' '>'? '>=';
	
WOrExpression returns WExpression:
	WAndExpression (=>({WBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=WAndExpression)*;
	
OpOr:
	'||' | 'or';

WAndExpression returns WExpression:
	WEqualityExpression (=>({WBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=WEqualityExpression)*;

OpAnd:
	'&&' | 'and';

WEqualityExpression returns WExpression:
	WRelationalExpression (=>({WBinaryOperation.leftOperand=current} feature=OpEquality) rightOperand=WRelationalExpression)*;

OpEquality:
	'==' | '!=' | '===' | '!==';

WRelationalExpression returns WExpression:
	WOtherOperatorExpression
	( //=>({WInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	 =>({WBinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=WOtherOperatorExpression)*;

OpCompare:
	'>=' | '<' '=' | '>' | '<' ;

WOtherOperatorExpression returns WExpression:
	WAdditiveExpression (=>({WBinaryOperation.leftOperand=current} feature=OpOther)
	rightOperand=WAdditiveExpression)*;

OpOther:
	  '..<'
	| '>' '..'
	| '..'
	| '=>' 
	| '>' (=>('>' '>') | '>') 
	| '<' (=>('<' '<') | '<' | '=>')
	| '<>'
	| '?:';

WAdditiveExpression returns WExpression:
	WMultiplicativeExpression (=>({WBinaryOperation.leftOperand=current} feature=OpAdd)
	rightOperand=WMultiplicativeExpression)*;

OpAdd:
	'+' | '-';

WMultiplicativeExpression returns WExpression:
	WUnaryOperation (=>({WBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=WUnaryOperation)*;

OpMulti:
	'*' | '**' | '/' | '%';

WUnaryOperation returns WExpression:
	{WUnaryOperation} feature=OpUnary operand=WUnaryOperation
	| WPostfixOperation 
;

OpUnary:
	'not' | "!" | "-" | "+";
	
WPostfixOperation returns WExpression:
	WMemberFeatureCall =>({WPostfixOperation.operand=current} feature=OpPostfix)?
;

OpPostfix:
	"++" | "--"
;

WFeatureCall : WSuperInvocation | WMemberFeatureCall;

WMemberFeatureCall returns WExpression:
	WPrimaryExpression
	(
		=>({WMemberFeatureCall.memberCallTarget=current} ("."| nullSafe?="?.")) 
		=>feature=FeatureCallID 
		(('(' 
			(memberCallArguments+=WExpression (',' memberCallArguments+=WExpression)*)? 
		')') | memberCallArguments+=WClosure	)
	)*;

FeatureCallID:
	ID;

WThis returns WExpression:
	{WThis} 'this'
;

WPrimaryExpression returns WExpression:
	WVariableReference |
	WLiteral |
	WConstructorCall |
	WParenthesizedExpression |
	WSuperInvocation |
	WIfExpression |
	WTry |
	WReturnExpression | 
	WThrow
//	XForLoopExpression |
;

WSuperInvocation returns WExpression: 
	{WSuperInvocation} 
	'super' 
	('(' 
		(memberCallArguments+=WExpression (',' memberCallArguments+=WExpression)*)? 
	')')	
;

WParenthesizedExpression returns WExpression:
	'(' WExpression ')';


WBlock returns WExpression: 
	{WBlock}
	'{'
		(expressions+=WExpressionOrVarDeclaration ';'?)*
	'}';

WExpressionOrVarDeclaration returns WExpression:
	WVariableDeclaration | WExpression;

WVariableReference:
	{WVariableReference} ref=[WReferenciable]
;

WIfExpression:
	'if' '(' condition=WExpression ')' 
		then=WExpression
	(=>'else'
		else=WExpression
	)?
;

// LITERALS

WLiteral returns WExpression:
	WClosure |
	WBooleanLiteral |
	WNumberLiteral |
	WNullLiteral |
	WStringLiteral |
	WObjectLiteral |
	WThis |
	WListLiteral
;

WBooleanLiteral returns WExpression :
	{WBooleanLiteral} ('false' | isTrue?='true');

WNullLiteral returns WExpression :
	{WNullLiteral} 'null';

WStringLiteral returns WExpression:
	{WStringLiteral} value=STRING;

WNumberLiteral returns WExpression :
	{WNumberLiteral} value=Number;

// CLOSURES

WClosure returns WExpression:
	=>({WClosure} 
	'{') 
		=>((parameters+=WParameter (',' parameters+=WParameter)*)? explicitSyntax?='->')? 
		expression=WBlockInClosure 
	'}';

WBlockInClosure: 
	{WBlock}
	(expressions+=WExpressionOrVarDeclaration ';'?)*;

// COLLECTIONS

WListLiteral:
	{WListLiteral} '[' (elements+=WExpression (',' elements+=WExpression )*)? ']';
	
WNamedObject:
	'object' name=ID ('inherits' parent=[WClass|QualifiedName] ('(' parentParameters+=WExpression (',' parentParameters+=WExpression)* ')')? )?'{'
		(members+=WVariableDeclaration ';'?)*
		(members+=WMethodDeclaration ';'?)*
	'}'
;

WCanExtendClass:
	WClass | WNamedObject
;

// CLASSES

WClass:
	'class' name=ID ('inherits' parent=[WClass|QualifiedName])? '{'
		(members+=WVariableDeclaration ';'?)*
		(constructors+=WConstructor)*
		(members+=WMethodDeclaration ';'?)*
	'}'
;

WMember:
	WVariableDeclaration | WMethodDeclaration
;

WConstructor:
	{WConstructor} 'new' '(' (parameters+=WParameter (',' parameters+=WParameter)*)? ')'
		('=' delegatingConstructorCall=WDelegatingConstructorCall)?
		(expression=WBlock)
;

WDelegatingConstructorCall:
	WThisDelegatingConstructorCall | WSuperDelegatingConstructorCall
;

// some how this should be referecens to WConstructor
WThisDelegatingConstructorCall:
	{WThisDelegatingConstructorCall} 'this' '(' (arguments+=WExpression (',' arguments+=WExpression)*)? ')'
;

// some how this should be referecens to WConstructor
WSuperDelegatingConstructorCall:
	{WSuperDelegatingConstructorCall} 'super' '(' (arguments+=WExpression (',' arguments+=WExpression)*)? ')'
;



WConstructorCall:
	'new' classRef=[WClass|QualifiedName]'('
		(arguments+=WExpression (',' arguments+=WExpression)*)?		
	')'
;

WTry:
	'try'
		expression=WExpression
	(catchBlocks+=WCatch)*
	(=>'then always' alwaysExpression=WExpression)?
;

WCatch:
	=>'catch' exceptionVarName=WVariable (':' exceptionType=[WClass|QualifiedName])?
		expression=WExpression 
;

WReturnExpression:
	'return' expression=WExpression	
;

WThrow:
	'throw' exception=WExpression
;