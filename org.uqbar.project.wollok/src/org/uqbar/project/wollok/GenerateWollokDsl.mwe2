module org.uqbar.project.wollok.GenerateWollokDsl

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.xtext.generator.ui.*
import org.eclipse.xtext.xtext.generator.model.project.*

var fileExtensions = "wpgm,wlk,wtest"
var projectName = "org.uqbar.project.wollok"
var grammarURI = "platform:/resource/${projectName}/src/org/uqbar/project/wollok/WollokDsl.xtext"
var runtimeProject = "../${projectName}"
var encoding = "UTF-8"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
		resourceSet = org.eclipse.xtext.resource.XtextResourceSet : theResourceSet {}

		// add mappings from platform:/resource to classpath:/
		uriMap = {
			from = "platform:/resource/org.eclipse.xtext.xbase/"
			to = "classpath:/"
		}
		uriMap = {
			from = "platform:/resource/org.eclipse.xtext.common.types/"
			to = "classpath:/"
		}

	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/model/generated"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}

	component = XtextGenerator {
		id = "WollokDSL"
		configuration = {
			project = StandardProjectConfig {
				baseName = "${projectName}"
				rootPath = ".."
				eclipsePlugin = {
					enabled = true
				}

				runtime = {
					enabled = true
				}

				runtimeTest = {
					enabled = true
				}

				eclipsePluginTest = {
					enabled = true
					name = "${projectName}.tests"
					root = "../${projectName}.tests"
				}

				genericIde = {
					enabled = true
					name = "${projectName}.ui"
					root = "../${projectName}.ui"
				}
			}
			code = {
				encoding = encoding
			}
		}

		language = StandardLanguage {
			resourceSet = theResourceSet
			grammarUri = grammarURI
			fileExtensions = fileExtensions
			emfGenerator = {
				javaModelDirectory = "/${projectName}/src-gen"
			}
			formatter = {
				generateStub = true
			}
			serializer = {
				generateStub = false
			}
			
			// rename refactoring
			fragment = ui.refactoring.RefactorElementNameFragment2 auto-inject {
				useJdtRefactoring = true
			}
			junitSupport = {
				junitVersion = "5"
			}
		}
	}

}

